# Generated by Django 5.2.6 on 2025-09-08 15:07

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=15)),
                ('location_type', models.CharField(choices=[('park', 'Park'), ('forest', 'Forest'), ('lake', 'Lake'), ('mountain', 'Mountain'), ('beach', 'Beach'), ('garden', 'Garden'), ('trail', 'Trail'), ('wildlife_area', 'Wildlife Area'), ('nature_reserve', 'Nature Reserve'), ('river', 'River'), ('waterfall', 'Waterfall'), ('desert', 'Desert')], max_length=20)),
                ('location_name', models.CharField(help_text='Name of the specific location', max_length=200)),
                ('target_latitude', models.FloatField(help_text='Target latitude for location verification')),
                ('target_longitude', models.FloatField(help_text='Target longitude for location verification')),
                ('verification_radius', models.IntegerField(default=500, help_text='Verification radius in meters')),
                ('required_elements', models.JSONField(default=list, help_text='Elements that should be in the photo')),
                ('special_instructions', models.TextField(blank=True, help_text='Special instructions for the challenge')),
                ('points_reward', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['difficulty_level', 'title'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Verification'), ('verified', 'Verified'), ('failed', 'Verification Failed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('submitted_photo', models.ImageField(upload_to='challenge_submissions/')),
                ('submitted_latitude', models.FloatField()),
                ('submitted_longitude', models.FloatField()),
                ('submission_notes', models.TextField(blank=True)),
                ('photo_verified', models.BooleanField(default=False)),
                ('location_verified', models.BooleanField(default=False)),
                ('verification_details', models.JSONField(default=dict)),
                ('points_earned', models.IntegerField(default=0)),
                ('bonus_points', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='challengeverification.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='FraudDetection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], default='low', max_length=10)),
                ('duplicate_image_detected', models.BooleanField(default=False)),
                ('suspicious_location', models.BooleanField(default=False)),
                ('metadata_inconsistencies', models.BooleanField(default=False)),
                ('rapid_submissions', models.BooleanField(default=False)),
                ('risk_factors', models.JSONField(default=list)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('requires_manual_review', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fraud_detection', to='challengeverification.challengeattempt')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fraud_reviews', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LocationVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('foursquare_places', models.JSONField(default=list)),
                ('closest_match', models.JSONField(default=dict)),
                ('distance_to_match', models.FloatField(blank=True, null=True)),
                ('location_type_match', models.BooleanField(default=False)),
                ('is_valid_coordinate', models.BooleanField(default=True)),
                ('country_code', models.CharField(blank=True, max_length=2)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('nearby_landmarks', models.JSONField(default=list)),
                ('verification_confidence', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location_verification', to='challengeverification.challengeattempt')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exif_data', models.JSONField(default=dict)),
                ('has_location_data', models.BooleanField(default=False)),
                ('photo_latitude', models.FloatField(blank=True, null=True)),
                ('photo_longitude', models.FloatField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('camera_info', models.JSONField(default=dict)),
                ('detected_objects', models.JSONField(default=list)),
                ('confidence_scores', models.JSONField(default=dict)),
                ('image_quality_score', models.FloatField(default=0.0)),
                ('authenticity_score', models.FloatField(default=0.0)),
                ('nature_elements', models.JSONField(default=list)),
                ('element_confidence', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='photo_analysis', to='challengeverification.challengeattempt')),
            ],
        ),
        migrations.CreateModel(
            name='VerificationMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_attempts', models.IntegerField(default=0)),
                ('successful_verifications', models.IntegerField(default=0)),
                ('failed_verifications', models.IntegerField(default=0)),
                ('average_verification_time', models.FloatField(default=0.0)),
                ('photo_failures', models.IntegerField(default=0)),
                ('location_failures', models.IntegerField(default=0)),
                ('quality_failures', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('challenge', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='challengeverification.challenge')),
            ],
        ),
    ]
