# Generated by Django 5.2.6 on 2025-09-08 14:40

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tech_stack', models.CharField(max_length=100)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=10)),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('checkbox', 'Checkbox')], max_length=20)),
                ('question_text', models.TextField()),
                ('options', models.JSONField(default=list)),
                ('correct_answers', models.JSONField(default=list)),
                ('explanation', models.TextField(blank=True)),
                ('generated_by_hf', models.BooleanField(default=False)),
                ('source_prompt', models.TextField(blank=True)),
                ('times_used', models.IntegerField(default=0)),
                ('quality_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['tech_stack', 'difficulty', '-quality_score'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_id', models.IntegerField()),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=10)),
                ('tech_stack', models.CharField(max_length=100)),
                ('total_questions', models.IntegerField(default=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('passed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'challenge_id')},
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('checkbox', 'Checkbox')], max_length=20)),
                ('question_text', models.TextField()),
                ('tech_stack', models.CharField(max_length=100)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=10)),
                ('options', models.JSONField(default=list)),
                ('correct_answers', models.JSONField(default=list)),
                ('explanation', models.TextField(blank=True)),
                ('points', models.IntegerField(default=20)),
                ('order', models.IntegerField(default=0)),
                ('reuse_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='quiz.quiz')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('total_score', models.FloatField(default=0.0)),
                ('quiz', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='attempt', to='quiz.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='QuizMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tech_stack', models.CharField(max_length=100)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=10)),
                ('total_quizzes', models.IntegerField(default=0)),
                ('total_passes', models.IntegerField(default=0)),
                ('average_score', models.FloatField(default=0.0)),
                ('average_completion_time', models.FloatField(default=0.0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('tech_stack', 'difficulty')},
            },
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_answers', models.JSONField(default=list)),
                ('is_correct', models.BooleanField(default=False)),
                ('points_earned', models.FloatField(default=0.0)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.question')),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='quiz.quizattempt')),
            ],
            options={
                'unique_together': {('attempt', 'question')},
            },
        ),
    ]
